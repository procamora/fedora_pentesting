#!/bin/bash

# Author: Pablo Rocamora (aka procamora)


DIR_FILES='/usr/share/pentesting'
RM="/bin/rm"


function core_tools() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
        ACTION_PIP="install"
    else
        ACTION="remove"
        ACTION_PIP="uninstall"
    fi

    #sudo dnf -y update
    sudo dnf -y install kernel-headers kernel-devel git make libxml2 libxml2-devel \
     cmake python3-devel gcc-c++ dkms openssl-devel p7zip-plugins zip unzip unrar \
     git wget curl perl-devel ruby-devel gem python3-pip make gcc cmake \
     g++ dos2unix java-openjdk java-1.8.0-openjdk-javadoc java-1.8.0-openjdk-devel \
     lua-devel vim-common bzip2 gzip php-devel php-process python3-impacket >> dnf.log

    sudo dnf groupinstall -y "Development Tools"

    sudo pip $ACTION_PIP pynput pyftpdlib configparser termcolor capstone pyinstaller


    wget -q https://golang.org/dl/go1.14.6.linux-amd64.tar.gz \
     -O go1.14.6.linux-amd64.tar.gz
    sudo tar -C /usr/local -xzf go1.14.6.linux-amd64.tar.gz
    export PATH=$PATH:/usr/local/go/bin

    test $(echo $SHELL | awk -F / '{print $NF}') = "zsh" && grep -q "/usr/local/go/bin" ~/.zshrc && echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.zshrc
    test $(echo $SHELL | awk -F / '{print $NF}') = "bash" && grep -q "/usr/local/go/bin" ~/.bashrc && echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.bashrc
}


function firefox_addons() {
    mkdir -p tmp/
    pushd tmp/
    wget -q https://addons.mozilla.org/firefox/downloads/file/3616824/foxyproxy_standard-latest.xpi -0 foxyproxy_standard.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3643261/wappalyzer-latest.xpi -0 wappalyzer.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3364082/rested-latest.xpi -0 rested.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3629683/ublock_origin-latest.xpi -0 ublock_origin.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3590348/hackbar-latest.xpi -0 hackbar.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3445870/tamper_data_for_ff_quantum-latest.xpi -0 tamper_data_for_ff_quantum.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3522684/user_agent_switcher-latest.xpi -0 user_agent_switcher.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3343599/cookie_quick_manager-latest.xpi -0 cookie_quick_manager.xpi

    #firefox foxyproxy_standard.xpi
    #firefox wappalyzer.xpi
    #firefox rested.xpi
    #firefox ublock_origin.xpi
    #firefox hackbar.xpi
    #firefox tamper_data_for_ff_quantum.xpi
    #firefox user_agent_switcher.xpi
    #firefox cookie_quick_manager.xpi
    firefox *.xpi
    rm *.xpi
    popd
    $RM -rf tmp/



}

# COPIAR DIRECTORRIO /use/share/john/ssh2john.py

#login con usuario
#su usuario

#ejecutar script con sudo para n usuario
#sudo -u usuario /bin/bash 



# https://github.com/tasooshi/pentesting-cookbook
function directories_basic() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
        sudo mkdir -p /usr/share/{wordlists,exploitation,}/
        sudo chown -R $USER:$USER /usr/share/{wordlists,exploitation,}/
        sudo chown -R $USER:$USER $DIR_FILES  # No es necesario, pero queda mas claro
    else
        ACTION="remove"
        sudo $RM -rf /usr/share/{wordlists,exploitation,}/
    fi

    printc "download seclists"
    DIR="$DIR_FILES/seclists/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/danielmiessler/SecLists $DIR \
         && sudo chown $USER:$USER $DIR -R
    else
        test -d $DIR && $RM -rf $DIR
    fi

    printc "download rockyou.txt"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://gitlab.com/kalilinux/packages/wordlists/-/raw/kali/master/rockyou.txt.gz \
         -O /usr/share/wordlists/rockyou.txt.gz
        sudo gzip -f -d /usr/share/wordlists/rockyou.txt.gz
    else
        test -f /usr/share/wordlists/rockyou.txt && $RM -f /usr/share/wordlists/rockyou.txt
    fi

    printc "download static-binaries"
    DIR="$DIR_FILES/static-binaries/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/andrew-d/static-binaries $DIR \
         && sudo chown $USER:$USER $DIR -R
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} impacket"
    DIR="/opt/impacket/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/SecureAuthCorp/impacket $DIR \
         && sudo chown $USER:$USER $DIR -R
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} pentest"
    DIR="$DIR_FILES/pentest/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/jivoi/pentest $DIR \
         && sudo chown $USER:$USER $DIR -R
    else
        test -d $DIR && $RM -rf $DIR
    fi

}


function information_gathering() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    sudo dnf $ACTION -y amap dnsenum dnsmap nikto nmap finger openldap-clients net-snmp-utils onesixtyone >> dnf.log


    printc "${ACTION} snmpcheck"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://gitlab.com/kalilinux/packages/snmpcheck/-/raw/kali/master/snmpcheck-1.9.rb \
         -O /usr/local/bin/snmpcheck
        gem install snmp
        sudo chmod +x /usr/local/bin/snmpcheck
    else
        test -f $DIR && sudo $RM -f /usr/local/bin/snmpcheck
    fi

    
    printc "${ACTION} smtp-user-enum"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/pentestmonkey/smtp-user-enum/master/smtp-user-enum.pl \
         -O /usr/local/bin/smtp-user-enum
        sudo chmod +x /usr/local/bin/smtp-user-enum
    else
        test -f $DIR && sudo $RM -f /usr/local/bin/smtp-user-enum
    fi


    printc "${ACTION} finger-user-enum"
        if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/pentestmonkey/finger-user-enum/master/finger-user-enum.pl \
         -O /usr/local/bin/finger-user-enum
        sudo chmod +x /usr/local/bin/finger-user-enum
    else
        test -f $DIR && sudo $RM -f /usr/local/bin/finger-user-enum
    fi


    printc "${ACTION} ftp-user-enum"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/pentestmonkey/ftp-user-enum/master/ftp-user-enum.pl \
         -O /usr/local/bin/ftp-user-enum
        sudo chmod +x /usr/local/bin/ftp-user-enum
    else
        test -f $DIR && sudo $RM -f /usr/local/bin/ftp-user-enum
    fi


    printc "${ACTION} ident-user-enum"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/pentestmonkey/ident-user-enum/master/ident-user-enum.pl \
         -O /usr/local/bin/ident-user-enum
        sudo chmod +x /usr/local/bin/ident-user-enum
    else
        test -f $DIR && sudo $RM -f /usr/local/bin/ident-user-enum
    fi


    printc "${ACTION} enum4linux"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://gitlab.com/kalilinux/packages/enum4linux/-/raw/kali/master/enum4linux.pl \
         -O /usr/local/bin/enum4linux
        sudo chmod +x /usr/local/bin/enum4linux
    else
        test -f $DIR && sudo $RM -f /usr/local/bin/enum4linux
    fi


    printc "${ACTION} masscan"
    DIR="/opt/masscan/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/robertdavidgraham/masscan $DIR \
         && sudo chown $USER:$USER $DIR -R
        pushd $DIR && make -j4 && popd
        test -f /usr/local/bin/masscan || sudo ln -s $DIR/bin/masscan /usr/local/bin/masscan
    else
        test -d $DIR && $RM -rf $DIR 
        test -f /usr/local/bin/masscan && sudo unlink /usr/local/bin/masscan
    fi
}


function vulnerability_analysis() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    sudo dnf $ACTION -y openvas-scanner openvas-manager sqlninja sslscan >> dnf.log

    printc "${ACTION} powerfuzzer"
    # CONVERTIR A PYTHON3 Y AÃ‘ADIR LIBRERIAS
    DIR="/opt/powerfuzzer/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/marcinguy/powerfuzzer $DIR \
         && sudo chown $USER:$USER $DIR -R
        chmod +x $DIR/powerfuzzer.py
        test -f /usr/local/bin/powerfuzzer || sudo ln -s $DIR/powerfuzzer.py /usr/local/bin/powerfuzzer
    else
        test -d $DIR && $RM -rf $DIR 
        test -f /usr/local/bin/powerfuzzer && sudo unlink /usr/local/bin/powerfuzzer
    fi


    # NO COMPILA
    #DIR="/opt/sfuzz/"
    #test -d $DIR && git -C $DIR pull
    #test -d $DIR || sudo git clone https://gitlab.com/kalilinux/packages/sfuzz $DIR \
    # && sudo chown $USER:$USER $DIR -R
    #cd $DIR
    #./configure
    #make -j4
    #cd -
    #test -f /usr/local/bin/sfuzz || sudo ln -s $DIR/sfuzz /usr/local/bin/sfuzz


    printc "${ACTION} sqlmap"
    DIR="/opt/sqlmap/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone --depth 1 https://github.com/sqlmapproject/sqlmap $DIR \
         && sudo chown $USER:$USER $DIR -R
        chmod +x $DIR/sqlmap.py
        test -f /usr/local/bin/sqlmap || sudo ln -s $DIR/sqlmap.py /usr/local/bin/sqlmap
    else
        test -d $DIR && $RM -rf $DIR 
        test -f /usr/local/bin/sqlmap && sudo unlink /usr/local/bin/sqlmap
    fi
}


function wireless_attacks() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    sudo dnf $ACTION -y aircrack-ng reaver kismet macchanger >> dnf.log
}


# cutycapt
function web_applications() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
        ACTION_PIP="install"
    else
        ACTION="remove"
        ACTION_PIP="uninstall"
    fi
    sudo dnf $ACTION -y wfuzz skipfish gobuster perl-CGI perl-HTTP-DAV >> dnf.log
    sudo gem install -n /usr/local/bin wpscan
    sudo pip $ACTION_PIP dirbpy


    printc "${ACTION} whatweb"
    DIR="/opt/whatweb/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/urbanadventurer/WhatWeb $DIR \
         && sudo chown $USER:$USER $DIR -R
        cd $DIR && sudo make -j && cd -
        test -f /usr/local/bin/whatweb || sudo ln -s $DIR/whatweb /usr/local/bin/whatweb
    else
        test -d $DIR && $RM -rf $DIR
        test -f /usr/local/bin/whatweb && sudo unlink /usr/local/bin/whatweb
    fi


    printc "${ACTION} websploit"
    DIR="/opt/websploit/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/websploit/websploit $DIR \
         && sudo chown $USER:$USER $DIR -R
        pushd $DIR && sudo python setup.py install && popd
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} recon-ng"
    DIR="/opt/recon-ng/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/lanmaster53/recon-ng $DIR \
         && sudo chown $USER:$USER $DIR -R
        test -f /usr/local/bin/recon-cli || sudo ln -s $DIR/recon-cli /usr/local/bin/recon-cli
        test -f /usr/local/bin/recon-ng || sudo ln -s $DIR/recon-ng /usr/local/bin/recon-ng
        test -f /usr/local/bin/recon-web || sudo ln -s $DIR/recon-web /usr/local/bin/recon-web
    else
        test -d $DIR && $RM -rf $DIR
        test -f /usr/local/bin/recon-* && sudo unlink usr/local/bin/recon-*
    fi


    printc "${ACTION} joomscan"
    DIR="/opt/joomscan/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/rezasp/joomscan $DIR \
         && sudo chown $USER:$USER $DIR -R
        test -f /usr/local/bin/joomscan || sudo ln -s $DIR/joomscan.pl /usr/local/bin/joomscan
        chmod +x $DIR/joomscan.pl
        dos2unix $DIR/joomscan.pl
    else
        test -d $DIR && $RM -rf $DIR 
        test -f /usr/local/bin/joomscan && sudo unlink /usr/local/bin/joomscan
    fi


    printc "${ACTION} hURL"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/fnord0/hURL/master/hURL \
         -O /usr/local/bin/hURL
        sudo chmod +x /usr/local/bin/hURL
    else
        test -f /usr/local/bin/hURL && sudo $RM -f  /usr/local/bin/hURL
    fi


    printc "${ACTION} davtest"
    DIR="/opt/davtest/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/cldrn/davtest $DIR \
         && sudo chown $USER:$USER $DIR -R
        test -f /usr/local/bin/davtest || sudo ln -s $DIR/davtest.pl /usr/local/bin/davtest
        sudo chmod +x /usr/local/bin/davtest
    else
        test -d $DIR && $RM -rf $DIR 
        test -f /usr/local/bin/davtest && sudo unlink /usr/local/bin/davtest
    fi


    printc "${ACTION} dirsearch"
    DIR="/opt/dirsearch/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/maurosoria/dirsearch $DIR \
         && sudo chown $USER:$USER $DIR -R
        test -f /usr/local/bin/dirsearch || sudo ln -s $DIR/dirsearch.py /usr/local/bin/dirsearch
        sudo chmod +x /usr/local/bin/dirsearch
    else
        test -d $DIR && $RM -rf $DIR
        test -f /usr/local/bin/dirsearch && sudo unlink /usr/local/bin/dirsearch
    fi


    printc "${ACTION} ffuf"
    DIR="/opt/ffuf/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/ffuf/ffuf $DIR \
         && sudo chown $USER:$USER $DIR -R
        pushd $DIR && go build && popd
        test -f /usr/local/bin/ffuf || sudo ln -s $DIR/ffuf /usr/local/bin/ffuf
        sudo chmod +x /usr/local/bin/ffuf
    else
        test -d $DIR && sudo $RM -rf $DIR 
        test -f /usr/local/bin/ffuf && sudo unlink /usr/local/bin/ffuf
    fi


    printc "${ACTION} dotdotpwn"
    DIR="/opt/dotdotpwn/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/wireghoul/dotdotpwn $DIR \
         && sudo chown $USER:$USER $DIR -R
        #test -f /usr/local/bin/dotdotpwn || sudo ln -s $DIR/dotdotpwn.pl /usr/local/bin/dotdotpwn
        sudo chmod +x $DIR/dotdotpwn.pl
    else
        test -d $DIR && sudo $RM -rf $DIR
    fi


    # REQUIERE PYTHON2 + LIB  httplib2
    #IR="/opt/fimap/"
    #test -d $DIR && git -C $DIR pull
    #test -d $DIR || sudo git clone https://gitlab.tha-imax.de/root/fimap $DIR \
    # && sudo chown $USER:$USER $DIR -R 
    #test -f /usr/local/bin/fimap || sudo ln -s $DIR/src/fimap.py /usr/local/bin/fimap && \
    # sed -i.back 's/!\/usr\/bin\/python/!\/usr\/bin\/python2/' $DIR/src/fimap.py
    #sudo chmod +x /usr/local/bin/fimap


    # REQUIERE PYTHON2 
    #DIR="/opt/w3af/"
    #test -d $DIR && git -C $DIR pull
    #test -d $DIR || sudo git clone https://github.com/andresriancho/w3af $DIR \
    # && sudo chown $USER:$USER $DIR -R
    #test -f /usr/local/bin/w3af || sudo ln -s $DIR/w3af.py /usr/local/bin/w3af
    #sudo chmod +x /usr/local/bin/w3af


    printc "${ACTION} ZAP"
    FILE="ZAP_2_9_0_unix.sh"
    wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.9.0/ZAP_2_9_0_unix.sh \
     -O $FILE
    chmod +x $FILE
    sudo ./$FILE
    $RM $FILE


    printc "${ACTION} burp"
    FILE="burp.sh"
    wget "https://portswigger.net/burp/releases/download?product=community&version=2020.7&type=Linux" \
     -O $FILE
    chmod +x $FILE
    sudo ./$FILE
    $RM $FILE
}


function exploitation_tools() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    sudo dnf $ACTION -y libxml2 >> dnf.log


    printc "${ACTION} exploit-database"
    DIR="/opt/exploit-database/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/offensive-security/exploit-database $DIR \
         && sudo chown $USER:$USER $DIR -R
        test -f /usr/local/bin/searchsploit || sudo ln -s $DIR/searchsploit /usr/local/bin/searchsploit
        sudo chmod +x /usr/local/bin/searchsploit
        sed 's|path_array+=(.*)|path_array+=("/opt/exploit-database")|g' /opt/exploit-database/.searchsploit_rc \
         > ~/.searchsploit_rc
        (find /opt/exploit-database/ -type f -exec dos2unix {} \; 2>/dev/null) &
    else
        test -d $DIR && $RM -rf $DIR
        test -f /usr/local/bin/searchsploit && sudo unlink /usr/local/bin/searchsploit
        test -f ~/.searchsploit_rc && $RM -f ~/.searchsploit_rc
    fi



    printc "${ACTION} revshell"
    if [ "${1}" == "install" ]; then
        # esta mal tabulado y con expand se convierten las tabulaciones a espacios
        curl -s https://raw.githubusercontent.com/dplastico/revshell/master/revshell.py | expand > /tmp/revshell
        sudo mv /tmp/revshell /usr/local/bin/revshell
        sudo chmod +x /usr/local/bin/revshell
    else
        test -f /usr/local/bin/revshell && sudo $RM -f /usr/local/bin/revshell
    fi


    printc "${ACTION} LinEnum"
    if [ "${1}" == "install" ]; then
        wget -q https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh \
         -O $DIR_FILES/le.sh
        chmod +x $DIR_FILES/le.sh
    else
        test -f $DIR_FILES/le.sh && $RM -f $DIR_FILES/le.sh
    fi


    printc "${ACTION} powercat"
    if [ "${1}" == "install" ]; then
        wget -q https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1 \
         -O $DIR_FILES/powercat.ps1
        chmod +x $DIR_FILES/powercat.ps1
    else
        test -f $DIR_FILES/powercat.ps1 && $RM -f $DIR_FILES/powercat.ps1
    fi


    printc "${ACTION} linux-exploit-suggester"
    if [ "${1}" == "install" ]; then
        wget -q https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh \
         -O $DIR_FILES/linux-exploit-suggester.sh
        chmod +x $DIR_FILES/linux-exploit-suggester.sh
    else
        test -f $DIR_FILES/linux-exploit-suggester.sh && $RM -f $DIR_FILES/linux-exploit-suggester.sh
    fi


    printc "${ACTION} linux-exploit-suggester-2.pl"
    if [ "${1}" == "install" ]; then
        wget -q https://raw.githubusercontent.com/jondonas/linux-exploit-suggester-2/master/linux-exploit-suggester-2.pl \
         -O $DIR_FILES/linux-exploit-suggester-2.pl
        chmod +x $DIR_FILES/linux-exploit-suggester-2.pl
    else
        test -f $DIR_FILES/linux-exploit-suggester-2.pl && $RM -f $DIR_FILES/linux-exploit-suggester-2.pl
    fi



    printc "${ACTION} linuxprivchecker"
    if [ "${1}" == "install" ]; then
        wget -q http://www.securitysift.com/download/linuxprivchecker.py \
         -O $DIR_FILES/powercat.ps1
        chmod +x $DIR_FILES/linuxprivchecker.py
    else
        test -f $DIR_FILES/linuxprivchecker.py && $RM -f $DIR_FILES/linuxprivchecker.py
    fi



    printc "${ACTION} knock"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/grongor/knock/master/knock \
         -O /usr/local/bin/knock
        sudo chmod +x /usr/local/bin/knock
    else
        test -f /usr/local/bin/knock && sudo $RM -f /usr/local/bin/knock
    fi


    printc "${ACTION} privilege-escalation-awesome-scripts-suite"
    DIR="$DIR_FILES/peass/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || git clone https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite $DIR \
         && sudo chown $USER:$USER $DIR -R
        test -f "$DIR_FILES/linpeas.sh" || ln -s $DIR_FILES/linPEAS/linpeas.sh "$DIR_FILES/linpeas.sh"
        test -f "$DIR_FILES/winPEAS.bat"|| ln -s $DIR_FILES/winPEAS/winPEAS.bat "$DIR_FILES/winPEAS.bat"
        #test -f /usr/local/bin/cewl || sudo ln -s $DIR/cewl.rb /usr/local/bin/cewl
    else
        test -d $DIR && $RM -rf $DIR
    fi



    printc "${ACTION} metasploit"
    curl -s https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-\
    framework-wrappers/msfupdate.erb > msfinstall
    chmod +x msfinstall
    sudo ./msfinstall
    $RM msfinstall
    test -f "/usr/local/bin/msfvenom" || sudo ln -s /opt/metasploit-framework/bin/msfvenom /usr/local/bin
    test -f "/usr/local/bin/msfconsole" || sudo ln -s /opt/metasploit-framework/bin/msfconsole /usr/local/bin


    printc "${ACTION} Veil"
    DIR="/opt/veil/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/Veil-Framework/Veil $DIR \
         && sudo chown $USER:$USER $DIR -R
        #sudo python $DIR/config/update-config.py --force --silent
    else
        test -d $DIR && $RM -rf $DIR
    fi


    # Requiere  glibc-devel.i686 glibc-devel
    #DIR="/opt/the-backdoor-factory/"
    #test -d $DIR && git -C $DIR pull
    #test -d $DIR || sudo git clone https://github.com/secretsquirrel/the-backdoor-factory $DIR \
    # && sudo chown $USER:$USER $DIR -R
    #cd $DIR && sudo ./install.sh && cd -

    #docker pull secretsquirrel/the-backdoor-factory
    #docker run -it secretsquirrel/the-backdoor-factory bash
    # ./backdoor.py


    printc "${ACTION} pspy32"
    if [ "${1}" == "install" ]; then
        wget -q https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy32 \
         -O $DIR_FILES/pspy32
        chmod +x $DIR_FILES/pspy32
    else
        test -f $DIR_FILES/pspy32 && $RM -f $DIR_FILES/pspy32
    fi


    printc "${ACTION} pspy64"
    if [ "${1}" == "install" ]; then
        wget -q https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64 \
         -O $DIR_FILES/pspy64
        chmod +x $DIR_FILES/pspy64
    else
        test -f $DIR_FILES/pspy32 && $RM -f $DIR_FILES/pspy32
    fi


    printc "${ACTION} pysecdump"
    DIR="$DIR_FILES/pysecdump/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || git clone https://github.com/pentestmonkey/pysecdump $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} windows-privesc-check"
    DIR="$DIR_FILES/windows-privesc-check/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || git clone https://github.com/pentestmonkey/windows-privesc-check $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} PowerSploit"
    DIR="$DIR_FILES/PowerSploit/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || git clone https://github.com/PowerShellMafia/PowerSploit $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} nishang"
    DIR="$DIR_FILES/nishang/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || git clone https://github.com/samratashok/nishang $DIR 
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} watson"
    DIR="$DIR_FILES/watson/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || git clone https://github.com/rasta-mouse/Watson $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} BeRoot"
    DIR="$DIR_FILES/BeRoot/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || git clone https://github.com/AlessandroZ/BeRoot $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi
}


function stress_testing() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
}


function forensics_tools() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    sudo dnf $ACTION -y binwalk >> dnf.log
}


function sniffing_spoofing() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
        ACTION_PIP="install"
    else
        ACTION="remove"
        ACTION_PIP="uninstall"
    fi
    sudo dnf $ACTION -y sipvicious wireshark libpcap-devel libusb-devel libnetfilter_queue-devel >> dnf.log



    printc "${ACTION} dnschef"
    sudo pip $ACTION_PIP dnslib
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/iphelix/dnschef/master/dnschef.py \
         -O /usr/local/bin/dnschef
        sudo chmod +x /usr/local/bin/dnschef
    else
        test -f /usr/local/bin/dnschef && $RM -f /usr/local/bin/dnschef
    fi


    printc "${ACTION} bettercap"
    #https://github.com/bettercap/bettercap/releases/download/v2.28/bettercap_linux_amd64_v2.28.zip
    DIR="/opt/bettercap/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/bettercap/bettercap $DIR \
         && sudo chown $USER:$USER $DIR -R
        cd $DIR && make build -j4 && sudo make install -j4 && cd -
        sudo bettercap -eval "caplets.update; ui.update; q"
        # credential in /usr/local/share/bettercap/caplets/http-ui.cap (user/pass)
        # start server web in http://127.0.0.1:80
        # sudo bettercap -caplet http-ui &
    else
        test -d $DIR && $RM -rf $DIR
    fi
}


function password_attacks() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    sudo dnf $ACTION -y hashid hydra ncrack ophcrack fcrackzip perl-Image-ExifTool >> dnf.log
    gem install bundler


    printc "${ACTION} creddump7"
    DIR="/opt/creddump7/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/Neohapsis/creddump7 $DIR \
         && sudo chown $USER:$USER $DIR -R
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} CeWL"
    DIR="/opt/CeWL/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/digininja/CeWL $DIR \
         && sudo chown $USER:$USER $DIR -R
        test -f /usr/local/bin/cewl || sudo ln -s $DIR/cewl.rb /usr/local/bin/cewl
        bundle update --bundler && bundle install
        # Requisito CeWL (se puede instalar con perl-Image-ExifTool)
        #wget -q https://exiftool.org/Image-ExifTool-12.01.tar.gz -O /tmp/Image-ExifTool.tar.gz
        #sudo tar xvf /tmp/Image-ExifTool.tar.gz -C /opt/
        #sudo chown $USER:$USER /opt/Image-ExifTool-12.01/ -R
        #cd /opt/Image-ExifTool-12.01/ && perl Makefile.PL && sudo make install -j && cd -
    else
        test -d $DIR && $RM -rf $DIR
        test -f /usr/local/bin/cewl && sudo unlink /usr/local/bin/cewl
    fi


    printc "${ACTION} crunch"
    wget -q https://forensics.cert.org/cert-forensics-tools-release-32.rpm -O /tmp/cert-forensics.rpm
    sudo rpm -Uvh /tmp/cert-forensics.rpm
    sudo dnf --enablerepo=forensics $ACTION -y crunch >> dnf.log
    #DIR="/opt/crunch/"
    #if [ "${1}" == "install" ]; then
    #    test -d $DIR && git -C $DIR pull
    #    test -d $DIR || sudo git clone https://github.com/jim3ma/crunch $DIR \
    #     && sudo chown $USER:$USER $DIR -R
    #else
    #    test -d $DIR && $RM -rf $DIR
    #    sudo unlink /usr/local/bin/cewl
    #fi


    printc "${ACTION} gpp-decrypt"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://gitlab.com/kalilinux/packages/gpp-decrypt/-/raw/kali/master/gpp-decrypt.rb \
         -O /usr/local/bin/gpp-decrypt
        sudo chmod +x /usr/local/bin/gpp-decrypt
    else
        test -f /usr/local/bin/gpp-decrypt && sudo $RM -f /usr/local/bin/gpp-decrypt
    fi


    printc "${ACTION} patator"
    sudo dnf $ACTION -y libpq-devel iketest  libsqlite3x-devel openldap mysql-devel \
     sqlcipher sqlcipher-devel >> dnf.log
    DIR="/opt/patator/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/lanjelot/patator $DIR \
         && sudo chown $USER:$USER $DIR -R
        pushd $DIR && sudo pip install -r requirements.txt && sudo python setup.py install && popd
        test -f /usr/local/bin/patator || sudo ln -s $DIR/patator.py /usr/local/bin/patator
    else
        test -d $DIR && $RM -rf $DIR
        test -f /usr/local/bin/patator && sudo unlink /usr/local/bin/patator
    fi


    printc "${ACTION} hashcat"
    # https://github.com/intel/compute-runtime/blob/master/opencl/doc/DISTRIBUTIONS.md
    sudo dnf install -y dnf-plugins-core && sudo dnf copr enable -y jdanecki/intel-opencl && sudo dnf $ACTION -y intel-opencl >> dnf.log
    DIR="/opt/hashcat/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/hashcat/hashcat.git $DIR \
         && sudo chown $USER:$USER $DIR -R
        pushd $DIR && make -j4 && sudo make install -j4 && popd
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} john"
    sudo dnf $ACTION -y openssl-devel >> dnf.log
    DIR="/opt/john/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/magnumripper/JohnTheRipper -b bleeding-jumbo $DIR \
         && sudo chown $USER:$USER $DIR -R
        pushd $DIR/src/ && ./configure && make -s clean && make -j4 && sudo make install -j4 && popd
        test -f /usr/local/bin/john || sudo ln -s $DIR/run/john /usr/local/bin/john
        sudo find $DIR/run -name "*2john*" -exec ln -s {} /usr/local/bin \;
    else
        test -d $DIR && $RM -rf $DIR
        find /usr/local/bin -name "*2john*" -exec  sudo unlink {} \;
    fi
}


function maintaining_access() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    sudo dnf $ACTION -y rlwrap socat nc tigervnc rdesktop >> dnf.log
    sudo dnf --enablerepo=forensics $ACTION -y cryptcat >> dnf.log


    printc "${ACTION} httptunnel"
    DIR="/opt/httptunnel/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/larsbrinkhoff/httptunnel $DIR \
         && sudo chown $USER:$USER $DIR -R
        pushd $DIR/ && ./autogen.sh && ./configure && make -j4 && sudo make install -j4 && popd
    else
        test -d $DIR && $RM -rf $DIR
    fi


    printc "${ACTION} webshells"
    DIR="$DIR_FILES/webshells/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || git clone https://gitlab.com/kalilinux/packages/webshells.git $DIR \
         && sudo chown $USER:$USER $DIR -R
    else
        test -d $DIR && $RM -rf $DIR
    fi


    # fallo al compilar
    #DIR="/opt/dns2tcp/"
    #test -d $DIR && git -C $DIR pull
    #test -d $DIR || sudo git clone https://github.com/alex-sector/dns2tcp $DIR \
    # && sudo chown $USER:$USER $DIR -R
    #cd $DIR/ && ./configure && make -j4 && sudo make install -j4 && cd -
}


function reverse_engineering() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    sudo dnf $ACTION -y ltrace strace >> dnf.log
}

function steganography() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    # perl-Image-ExifTool- -> /usr/bin/exiftool
    sudo dnf $ACTION -y steghide perl-Image-ExifTool >> dnf.log


    printc "${ACTION} easy_stegoCTF"
    DIR="/opt/easy_stegoCTF/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull
        test -d $DIR || sudo git clone https://github.com/carlospolop/easy_stegoCTF $DIR \
         && sudo chown $USER:$USER $DIR -R    
    else
        test -d $DIR && $RM -rf $DIR
    fi

    
}

function reportingtools() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
}




function install() {
    core_tools $1
    firefox_addons

    directories_basic $1
    information_gathering $1
    vulnerability_analysis $1
    wireless_attacks $1
    web_applications $1
    exploitation_tools $1
    stress_testing $1
    forensics_tools $1
    sniffing_spoofing $1
    password_attacks $1
    maintaining_access $1
    reverse_engineering $1
    steganography $1
}


function extra() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi

    sudo dnf --enablerepo=forensics $ACTION -y ghidra >> dnf.log
}

function printc() {
    echo -e "${GREEN_COLOUR}$1${RESET_COLOUR}" # print stdout
    >&2 echo -e "${RED_COLOUR}$1${RESET_COLOUR}" # print stderr
}


function print_help() {
    PROGRAM=$(echo $0 | tr -d './' | tr -d '.sh')
    PROGRAM=$(echo $0 | awk -F  "./" '{printc $NF}')

    echo -e "\n${PURPLE_COLOUR}${PROGRAM} v1.0 (Source: https://github.com/procamora/fedora_pentesting)${RESET_COLOUR}"
    echo -e "\n${ORANGE_COLOUR}[*] Use: ./${PROGRAM}.sh OPTION${RESET_COLOUR}"
    echo -e "\n${ORANGE_COLOUR}[*] List of available options:${RESET_COLOUR}"
    echo -e "\t${GREEN_COLOUR}install${RESET_COLOUR}\t\t Installing the basic pentesting packages"
    echo -e "\t${GREEN_COLOUR}extra${RESET_COLOUR}\t\t Installing the extra pentesting packages"
    echo -e "\t${GREEN_COLOUR}uninstall${RESET_COLOUR}\t Uninstalling the basic pentesting packages"
    echo -e "\t${GREEN_COLOUR}unextra${RESET_COLOUR}\t\t Uninstalling the extra pentesting packages"
    echo -e "\t${GREEN_COLOUR}upgrade${RESET_COLOUR}\t\t Upgrade the extra pentesting packages ${CYAN_COLOUR}(same as install)${RESET_COLOUR}"


    echo -e "\n\n${BLUE_COLOUR}Example: ./${PROGRAM}.sh install${RESET_COLOUR}\n"

    tput cnorm
    exit 1
}


function main() {
    tput civis
    test -f dnf.log && $RM -r dnf.log

    VALID_ARGUMENT="False" # Usado para detectar si se ha puesto un argumento valido

    test "$1" = "" && print_help
    (test "$1" = "install" || test "$1" = "upgrade" ) && install "install" && VALID_ARGUMENT="True"
    test "$1" = "extra" && extra "install" && VALID_ARGUMENT="True"
    test "$1" = "uninstall" && install "uninstall" && VALID_ARGUMENT="True"
    test "$1" = "unextra" && extra "uninstall" && VALID_ARGUMENT="True"

    printc "$VALID_ARGUMENT"
    printc "$VALID_ARGUMENT"

    test "$VALID_ARGUMENT" = "False" && print_help

    sudo updatedb 

    echo -e "${GREEN_COLOUR}Finishing $0${RESET_COLOUR}"
    tput cnorm
}


function ctrl_c(){
    printc "Exiting..."
    #echo -e "\n${RED}Exiting...${NC}"
    tput cnorm
    exit 0
}


#trap 'exit 130' INT #Exit if trap Ctrl+C
trap ctrl_c INT


#Colours
declare -r BLACK_COLOUR='\e[0;30m'
declare -r RED_COLOUR='\e[0;31m'
declare -r GREEN_COLOUR='\e[0;32m'
declare -r ORANGE_COLOUR='\e[0;33m'
declare -r BLUE_COLOUR='\e[0;34m'
declare -r PURPLE_COLOUR='\e[0;35m'
declare -r CYAN_COLOUR='\e[0;36m'
declare -r WHITE_COLOUR='\e[0;37m'
declare -r RESET_COLOUR='\e[0m'


main "$@"

