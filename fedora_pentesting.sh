#!/bin/bash
# Author: Pablo Rocamora (aka procamora)

#set -ex


DIR_WORDLIST='/usr/share/wordlists'
DIR_PENTEST='/usr/share/pentesting'
OPT_DIR='/opt/pentesting'
DIR_BINS='/usr/local/bin'

LOG="install.log"

DNF="sudo dnf -yq"
RM="/bin/rm"

function core_tools() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
        ACTION_PIP="install"
    else
        ACTION="remove"
        ACTION_PIP="uninstall"
    fi

    #$DNF upgrade
    $DNF install dnf-plugins-core 
    $DNF install "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm" \
     "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm" \
     cmake python3-devel gcc-c++ dkms openssl-devel p7zip-plugins zip unzip \
     git wget curl perl-devel ruby-devel gem python3-pip make gcc cmake openvpn atop \
     g++ dos2unix java-openjdk java-1.8.0-openjdk-javadoc java-1.8.0-openjdk-devel \
     lua-devel vim-common bzip2 gzip php-devel php-process python3-impacket tmux zsh

    # quiet warning Signature
    $DNF install --nogpgcheck unrar 2> /dev/null
    $DNF install mlocate
    $DNF groupinstall "Development Tools"

    sudo pip -q $ACTION_PIP pynput pyftpdlib configparser termcolor capstone pyinstaller


    TAR_GO="go1.15.2.linux-amd64.tar.gz"
    wget -q https://golang.org/dl/$TAR_GO \
     -O $TAR_GO
    sudo tar -C /usr/local -xzf $TAR_GO
    $RM $TAR_GO

    export PATH=$PATH:/usr/local/go/bin

    test -f ~/.zshrc && grep -q "/usr/local/go/bin" ~/.zshrc || echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.zshrc # important '' for add $PATH literal
    test -f ~/.bashrc && grep -q "/usr/local/go/bin" ~/.bashrc || echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
    #test $(echo $SHELL | awk -F / '{print $NF}') = "zsh" && grep -q "/usr/local/go/bin" ~/.zshrc || echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.zshrc
    #test $(echo $SHELL | awk -F / '{print $NF}') = "bash" && grep -q "/usr/local/go/bin" ~/.bashrc || echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.bashrc
}


function firefox_addons() {
    mkdir -p tmp/
    pushd tmp/
    wget -q https://addons.mozilla.org/firefox/downloads/file/3616824/foxyproxy_standard-latest.xpi -0 foxyproxy_standard.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3643261/wappalyzer-latest.xpi -0 wappalyzer.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3364082/rested-latest.xpi -0 rested.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3629683/ublock_origin-latest.xpi -0 ublock_origin.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3590348/hackbar-latest.xpi -0 hackbar.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3445870/tamper_data_for_ff_quantum-latest.xpi -0 tamper_data_for_ff_quantum.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3522684/user_agent_switcher-latest.xpi -0 user_agent_switcher.xpi
    wget -q https://addons.mozilla.org/firefox/downloads/file/3343599/cookie_quick_manager-latest.xpi -0 cookie_quick_manager.xpi

    firefox foxyproxy_standard.xpi
    firefox wappalyzer.xpi
    firefox rested.xpi
    firefox ublock_origin.xpi
    firefox hackbar.xpi
    firefox tamper_data_for_ff_quantum.xpi
    firefox user_agent_switcher.xpi
    firefox cookie_quick_manager.xpi
    
    rm *.xpi
    popd
    $RM -rf tmp/
}
# COPIAR DIRECTORRIO /use/share/john/ssh2john.py

#login con usuario
#su usuario


# https://github.com/tasooshi/pentesting-cookbook
function directories_basic() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
        sudo mkdir -p /usr/share/{wordlists,pentesting,}/
        sudo mkdir -p $OPT_DIR
        sudo chown -R "$USER":"$USER" /usr/share/{wordlists,pentesting,}/
        sudo chown -P "$USER":"$USER" $OPT_DIR
    else
        ACTION="remove"
        #sudo $RM -rf /usr/share/{wordlists,pentesting}/
        #sudo $RM -rf $OPT_DIR
    fi

    print_format "downloading ${RESET_COLOUR}${PURPLE_COLOUR}seclists"
    DIR="$DIR_WORDLIST/seclists/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/danielmiessler/SecLists $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi

    print_format "downloading ${RESET_COLOUR}${PURPLE_COLOUR}rockyou.txt"
    if [ "${1}" == "install" ]; then
        wget -q https://gitlab.com/kalilinux/packages/wordlists/-/raw/kali/master/rockyou.txt.gz \
         -O /usr/share/wordlists/rockyou.txt.gz
        gzip -f -d /usr/share/wordlists/rockyou.txt.gz
    else
        test -f /usr/share/wordlists/rockyou.txt && $RM -f /usr/share/wordlists/rockyou.txt
    fi

    print_format "downloading ${RESET_COLOUR}${PURPLE_COLOUR}static-binaries"
    DIR="$DIR_PENTEST/static-binaries/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/andrew-d/static-binaries $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}impacket"
    DIR="$OPT_DIR/impacket/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/SecureAuthCorp/impacket $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}pentest"
    DIR="$DIR_PENTEST/pentest/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/jivoi/pentest $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi

}


function information_gathering() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    $DNF $ACTION amap dnsenum dnsmap nikto nmap finger openldap-clients net-snmp-utils onesixtyone


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}snmpcheck"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://gitlab.com/kalilinux/packages/snmpcheck/-/raw/kali/master/snmpcheck-1.9.rb \
         -O "$DIR_BINS/snmpcheck"
        gem install snmp
        sudo chmod +x $DIR_BINS/snmpcheck
    else
        test -f $DIR && sudo $RM -f $DIR_BINS/snmpcheck
    fi

    
    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}smtp-user-enum"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/pentestmonkey/smtp-user-enum/master/smtp-user-enum.pl \
         -O "$DIR_BINS/smtp-user-enum"
        sudo chmod +x $DIR_BINS/smtp-user-enum
    else
        test -f $DIR && sudo $RM -f $DIR_BINS/smtp-user-enum
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}finger-user-enum"
        if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/pentestmonkey/finger-user-enum/master/finger-user-enum.pl \
         -O "$DIR_BINS/finger-user-enum"
        sudo chmod +x $DIR_BINS/finger-user-enum
    else
        test -f $DIR && sudo $RM -f $DIR_BINS/finger-user-enum
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}ftp-user-enum"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/pentestmonkey/ftp-user-enum/master/ftp-user-enum.pl \
         -O "$DIR_BINS/ftp-user-enum"
        sudo chmod +x $DIR_BINS/ftp-user-enum
    else
        test -f $DIR && sudo $RM -f $DIR_BINS/ftp-user-enum
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}ident-user-enum"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/pentestmonkey/ident-user-enum/master/ident-user-enum.pl \
         -O "$DIR_BINS/ident-user-enum"
        sudo chmod +x $DIR_BINS/ident-user-enum
    else
        test -f $DIR && sudo $RM -f $DIR_BINS/ident-user-enum
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}enum4linux"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://gitlab.com/kalilinux/packages/enum4linux/-/raw/kali/master/enum4linux.pl \
         -O "$DIR_BINS/enum4linux"
        sudo chmod +x $DIR_BINS/enum4linux
    else
        test -f $DIR && sudo $RM -f $DIR_BINS/enum4linux
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}masscan"
    DIR="$OPT_DIR/masscan/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/robertdavidgraham/masscan $DIR
        pushd $DIR && make -j4 && popd
        test -f $DIR_BINS/masscan || sudo ln -s $DIR/bin/masscan $DIR_BINS/masscan
    else
        test -d $DIR && $RM -rf $DIR 
        test -f $DIR_BINS/masscan && sudo unlink $DIR_BINS/masscan
    fi
}


function vulnerability_analysis() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    $DNF $ACTION openvas-scanner openvas-manager sqlninja sslscan

    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}powerfuzzer"
    # CONVERTIR A PYTHON3 Y AÃ‘ADIR LIBRERIAS
    DIR="$OPT_DIR/powerfuzzer/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/marcinguy/powerfuzzer $DIR
        chmod +x $DIR/powerfuzzer.py
        test -f $DIR_BINS/powerfuzzer || sudo ln -s $DIR/powerfuzzer.py $DIR_BINS/powerfuzzer
    else
        test -d $DIR && $RM -rf $DIR 
        test -f $DIR_BINS/powerfuzzer && sudo unlink $DIR_BINS/powerfuzzer
    fi


    # NO COMPILA
    #DIR="$OPT_DIR/sfuzz/"
    #test -d $DIR && git -C $DIR pull -q
    #test -d $DIR || sudo git clone -q https://gitlab.com/kalilinux/packages/sfuzz $DIR \
    # && sudo chown "$USER":"$USER" $DIR -R
    #cd $DIR
    #./configure
    #make -j4
    #cd -
    #test -f $DIR_BINS/sfuzz || sudo ln -s $DIR/sfuzz $DIR_BINS/sfuzz


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}sqlmap"
    DIR="$OPT_DIR/sqlmap/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q --depth 1 https://github.com/sqlmapproject/sqlmap $DIR
        chmod +x $DIR/sqlmap.py
        test -f $DIR_BINS/sqlmap || sudo ln -s $DIR/sqlmap.py $DIR_BINS/sqlmap
    else
        test -d $DIR && $RM -rf $DIR 
        test -f $DIR_BINS/sqlmap && sudo unlink $DIR_BINS/sqlmap
    fi
}


function wireless_attacks() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    $DNF $ACTION aircrack-ng reaver kismet macchanger
}


# cutycapt
function web_applications() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
        ACTION_PIP="install"
    else
        ACTION="remove"
        ACTION_PIP="uninstall"
    fi
    $DNF $ACTION --noautoremove wfuzz skipfish gobuster perl-CGI perl-HTTP-DAV
    # --noautoremove => to avoid uninstalling python3-future
    sudo gem install -n $DIR_BINS wpscan
    sudo pip -q $ACTION_PIP dirbpy


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}whatweb"
    DIR="$OPT_DIR/whatweb/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/urbanadventurer/WhatWeb $DIR
        pushd $DIR && sudo make -j && popd
        test -f $DIR_BINS/whatweb || sudo ln -s $DIR/whatweb $DIR_BINS/whatweb
    else
        test -d $DIR && $RM -rf $DIR
        test -f $DIR_BINS/whatweb && sudo unlink $DIR_BINS/whatweb
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}websploit"
    DIR="$OPT_DIR/websploit/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/websploit/websploit $DIR
        pushd $DIR && sudo python setup.py install && popd
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}recon-ng"
    DIR="$OPT_DIR/recon-ng/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/lanmaster53/recon-ng $DIR
        test -f $DIR_BINS/recon-cli || sudo ln -s $DIR/recon-cli $DIR_BINS/recon-cli
        test -f $DIR_BINS/recon-ng || sudo ln -s $DIR/recon-ng $DIR_BINS/recon-ng
        test -f $DIR_BINS/recon-web || sudo ln -s $DIR/recon-web $DIR_BINS/recon-web
    else
        test -d $DIR && $RM -rf $DIR
        test -f $DIR_BINS/recon-* && sudo unlink usr/local/bin/recon-*
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}joomscan"
    DIR="$OPT_DIR/joomscan/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/rezasp/joomscan $DIR
        test -f $DIR_BINS/joomscan || sudo ln -s $DIR/joomscan.pl $DIR_BINS/joomscan
        chmod +x $DIR/joomscan.pl
        dos2unix -q $DIR/joomscan.pl 
    else
        test -d $DIR && $RM -rf $DIR 
        test -f $DIR_BINS/joomscan && sudo unlink $DIR_BINS/joomscan
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}hURL"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/fnord0/hURL/master/hURL \
         -O $DIR_BINS/hURL
        sudo chmod +x $DIR_BINS/hURL
    else
        test -f $DIR_BINS/hURL && sudo $RM -f  $DIR_BINS/hURL
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}davtest"
    DIR="$OPT_DIR/davtest/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/cldrn/davtest $DIR
        test -f $DIR_BINS/davtest || sudo ln -s $DIR/davtest.pl $DIR_BINS/davtest
        sudo chmod +x $DIR_BINS/davtest
    else
        test -d $DIR && $RM -rf $DIR 
        test -f $DIR_BINS/davtest && sudo unlink $DIR_BINS/davtest
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}dirsearch"
    DIR="$OPT_DIR/dirsearch/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/maurosoria/dirsearch $DIR
        test -f $DIR_BINS/dirsearch || sudo ln -s $DIR/dirsearch.py $DIR_BINS/dirsearch
        sudo chmod +x $DIR_BINS/dirsearch
    else
        test -d $DIR && $RM -rf $DIR
        test -f $DIR_BINS/dirsearch && sudo unlink $DIR_BINS/dirsearch
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}ffuf"
    DIR="$OPT_DIR/ffuf/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/ffuf/ffuf $DIR
        pushd $DIR && (go build) 2> $LOG && popd
        test -f $DIR_BINS/ffuf || sudo ln -s $DIR/ffuf $DIR_BINS/ffuf
        sudo chmod +x $DIR_BINS/ffuf
    else
        test -d $DIR && sudo $RM -rf $DIR 
        test -f $DIR_BINS/ffuf && sudo unlink $DIR_BINS/ffuf
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}dotdotpwn"
    DIR="$OPT_DIR/dotdotpwn/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/wireghoul/dotdotpwn $DIR
        #test -f $DIR_BINS/dotdotpwn || sudo ln -s $DIR/dotdotpwn.pl $DIR_BINS/dotdotpwn
        sudo chmod +x $DIR/dotdotpwn.pl
    else
        test -d $DIR && sudo $RM -rf $DIR
    fi


    # REQUIERE PYTHON2 + LIB  httplib2
    #IR="/opt/fimap/"
    #test -d $DIR && git -C $DIR pull -q
    #test -d $DIR || sudo git clone -q https://gitlab.tha-imax.de/root/fimap $DIR \
    # && sudo chown "$USER":"$USER" $DIR -R 
    #test -f $DIR_BINS/fimap || sudo ln -s $DIR/src/fimap.py $DIR_BINS/fimap && \
    # sed -i.back 's/!\/usr\/bin\/python/!\/usr\/bin\/python2/' $DIR/src/fimap.py
    #sudo chmod +x $DIR_BINS/fimap


    # REQUIERE PYTHON2 
    #DIR="$OPT_DIR/w3af/"
    #test -d $DIR && git -C $DIR pull -q
    #test -d $DIR || sudo git clone -q https://github.com/andresriancho/w3af $DIR \
    # && sudo chown "$USER":"$USER" $DIR -R
    #test -f $DIR_BINS/w3af || sudo ln -s $DIR/w3af.py $DIR_BINS/w3af
    #sudo chmod +x $DIR_BINS/w3af

}


function gui() {

    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}ZAP"
    FILE="ZAP_2_9_0_unix.sh"
    wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.9.0/ZAP_2_9_0_unix.sh \
     -O $FILE
    chmod +x $FILE && sudo ./$FILE
    $RM $FILE


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}burp"
    FILE="burp.sh"
    wget "https://portswigger.net/burp/releases/download?product=community&version=2020.7&type=Linux" \
     -O $FILE
    chmod +x $FILE && sudo ./$FILE
    $RM $FILE
}


function exploitation_tools() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    $DNF install libxml2  # Caution: don't delete, because it removes dependencies


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}exploit-database"
    DIR="$OPT_DIR/exploit-database/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/offensive-security/exploit-database $DIR
        test -f $DIR_BINS/searchsploit || sudo ln -s $DIR/searchsploit $DIR_BINS/searchsploit
        sudo chmod +x $DIR_BINS/searchsploit
        sed 's|path_array+=(.*)|path_array+=("/opt/exploit-database")|g' $DIR/.searchsploit_rc > ~/.searchsploit_rc
        (find /opt/exploit-database/ -type f -exec dos2unix -q {} \; 2>/dev/null) &
    else
        test -d $DIR && $RM -rf $DIR
        test -f $DIR_BINS/searchsploit && sudo unlink $DIR_BINS/searchsploit
        test -f ~/.searchsploit_rc && $RM -f ~/.searchsploit_rc
    fi



    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}revshell"
    if [ "${1}" == "install" ]; then
        # esta mal tabulado y con expand se convierten las tabulaciones a espacios
        curl -s https://raw.githubusercontent.com/dplastico/revshell/master/revshell.py | expand > /tmp/revshell
        sudo mv /tmp/revshell $DIR_BINS/revshell
        sudo chmod +x $DIR_BINS/revshell
    else
        test -f $DIR_BINS/revshell && sudo $RM -f $DIR_BINS/revshell
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}LinEnum"
    if [ "${1}" == "install" ]; then
        wget -q https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh \
         -O $DIR_PENTEST/le.sh
        chmod +x $DIR_PENTEST/le.sh
    else
        test -f $DIR_PENTEST/le.sh && $RM -f $DIR_PENTEST/le.sh
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}powercat"
    if [ "${1}" == "install" ]; then
        wget -q https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1 \
         -O $DIR_PENTEST/powercat.ps1
        chmod +x $DIR_PENTEST/powercat.ps1
    else
        test -f $DIR_PENTEST/powercat.ps1 && $RM -f $DIR_PENTEST/powercat.ps1
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}linux-exploit-suggester"
    if [ "${1}" == "install" ]; then
        wget -q https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh \
         -O $DIR_PENTEST/linux-exploit-suggester.sh
        chmod +x $DIR_PENTEST/linux-exploit-suggester.sh
    else
        test -f $DIR_PENTEST/linux-exploit-suggester.sh && $RM -f $DIR_PENTEST/linux-exploit-suggester.sh
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}linux-exploit-suggester-2.pl"
    if [ "${1}" == "install" ]; then
        wget -q https://raw.githubusercontent.com/jondonas/linux-exploit-suggester-2/master/linux-exploit-suggester-2.pl \
         -O $DIR_PENTEST/linux-exploit-suggester-2.pl
        chmod +x $DIR_PENTEST/linux-exploit-suggester-2.pl
    else
        test -f $DIR_PENTEST/linux-exploit-suggester-2.pl && $RM -f $DIR_PENTEST/linux-exploit-suggester-2.pl
    fi



    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}linuxprivchecker"
    if [ "${1}" == "install" ]; then
        wget -q http://www.securitysift.com/download/linuxprivchecker.py \
         -O $DIR_PENTEST/linuxprivchecker.py
        chmod +x $DIR_PENTEST/linuxprivchecker.py
    else
        test -f $DIR_PENTEST/linuxprivchecker.py && $RM -f $DIR_PENTEST/linuxprivchecker.py
    fi



    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}knock"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/grongor/knock/master/knock \
         -O $DIR_BINS/knock
        sudo chmod +x $DIR_BINS/knock
    else
        test -f $DIR_BINS/knock && sudo $RM -f $DIR_BINS/knock
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}privilege-escalation-awesome-scripts-suite"
    DIR="$DIR_PENTEST/peass/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite $DIR
        test -f "$DIR_PENTEST/linpeas.sh" || ln -s $DIR_PENTEST/linPEAS/linpeas.sh "$DIR_PENTEST/linpeas.sh"
        test -f "$DIR_PENTEST/winPEAS.bat"|| ln -s $DIR_PENTEST/winPEAS/winPEAS.bat "$DIR_PENTEST/winPEAS.bat"
        #test -f $DIR_BINS/cewl || sudo ln -s $DIR/cewl.rb $DIR_BINS/cewl
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}metasploit"
    curl -s https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall
    chmod +x msfinstall && sudo ./msfinstall
    $RM msfinstall
    test -f "$DIR_BINS/msfvenom" || sudo ln -s /opt/metasploit-framework/bin/msfvenom $DIR_BINS
    test -f "$DIR_BINS/msfconsole" || sudo ln -s /opt/metasploit-framework/bin/msfconsole $DIR_BINS


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}Veil"
    DIR="$OPT_DIR/veil/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/Veil-Framework/Veil $DIR
        #sudo python $DIR/config/update-config.py --force --silent
    else
        test -d $DIR && $RM -rf $DIR
    fi


    # Requiere  glibc-devel.i686 glibc-devel
    #DIR="$OPT_DIR/the-backdoor-factory/"
    #test -d $DIR && git -C $DIR pull -q
    #test -d $DIR || sudo git clone -q https://github.com/secretsquirrel/the-backdoor-factory $DIR \
    # && sudo chown "$USER":"$USER" $DIR -R
    #cd $DIR && sudo ./install.sh && cd -

    #docker pull secretsquirrel/the-backdoor-factory
    #docker run -it secretsquirrel/the-backdoor-factory bash
    # ./backdoor.py


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}pspy32"
    if [ "${1}" == "install" ]; then
        wget -q https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy32 \
         -O $DIR_PENTEST/pspy32
        chmod +x $DIR_PENTEST/pspy32
    else
        test -f $DIR_PENTEST/pspy32 && $RM -f $DIR_PENTEST/pspy32
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}pspy64"
    if [ "${1}" == "install" ]; then
        wget -q https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64 \
         -O $DIR_PENTEST/pspy64
        chmod +x $DIR_PENTEST/pspy64
    else
        test -f $DIR_PENTEST/pspy32 && $RM -f $DIR_PENTEST/pspy32
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}pysecdump"
    DIR="$DIR_PENTEST/pysecdump/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/pentestmonkey/pysecdump $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}windows-privesc-check"
    DIR="$DIR_PENTEST/windows-privesc-check/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/pentestmonkey/windows-privesc-check $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}PowerSploit"
    DIR="$DIR_PENTEST/PowerSploit/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/PowerShellMafia/PowerSploit $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}nishang"
    DIR="$DIR_PENTEST/nishang/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/samratashok/nishang $DIR 
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}watson"
    DIR="$DIR_PENTEST/watson/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/rasta-mouse/Watson $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}BeRoot"
    DIR="$DIR_PENTEST/BeRoot/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/AlessandroZ/BeRoot $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi
}


function stress_testing() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
}


function forensics_tools() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    $DNF install binwalk  # Caution: don't delete, because it removes dependencies
}


function sniffing_spoofing() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
        ACTION_PIP="install"
    else
        ACTION="remove"
        ACTION_PIP="uninstall"
    fi
    $DNF $ACTION sipvicious wireshark wireshark-cli libpcap-devel libusb-devel libnetfilter_queue-devel


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}dnschef"
    sudo pip -q $ACTION_PIP dnslib
    if [ "${1}" == "install" ]; then
        sudo wget -q https://raw.githubusercontent.com/iphelix/dnschef/master/dnschef.py \
         -O $DIR_BINS/dnschef
        sudo chmod +x $DIR_BINS/dnschef
    else
        test -f $DIR_BINS/dnschef && $RM -f $DIR_BINS/dnschef
    fi


    #print_format "${ACTION} bettercap"
    #https://github.com/bettercap/bettercap/releases/download/v2.28/bettercap_linux_amd64_v2.28.zip
    #DIR="$OPT_DIR/bettercap/"
    #if [ "${1}" == "install" ]; then
    #    test -d $DIR && git -C $DIR pull -q
    #    test -d $DIR || git clone -q https://github.com/bettercap/bettercap $DIR
    #    pushd $DIR && (make build -j4) 2> $LOG && sudo make install -j4 && popd
    #    sudo bettercap -eval "caplets.update; ui.update; q"
            # INFO:
            # credential in /usr/local/share/bettercap/caplets/http-ui.cap (user/pass)
            # start server web in http://127.0.0.1:80
            # sudo bettercap -caplet http-ui &
    #else
    #    test -d $DIR && $RM -rf $DIR
    #fi
}


function password_attacks() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    $DNF $ACTION hashid hydra ncrack ophcrack perl-Image-ExifTool
    wget -q https://forensics.cert.org/cert-forensics-tools-release-32.rpm -O /tmp/cert-forensics.rpm
    sudo rpm --quiet -Uvh /tmp/cert-forensics.rpm
    $DNF --enablerepo=forensics $ACTION fcrackzip
    gem install bundler


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}creddump7"
    DIR="$OPT_DIR/creddump7/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/Neohapsis/creddump7 $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}CeWL"
    DIR="$OPT_DIR/CeWL/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/digininja/CeWL $DIR
        test -f $DIR_BINS/cewl || sudo ln -s $DIR/cewl.rb $DIR_BINS/cewl
        pushd $DIR && bundle update --bundler && bundle install && popd
        # Requisito CeWL (se puede instalar con perl-Image-ExifTool)
        #wget -q https://exiftool.org/Image-ExifTool-12.01.tar.gz -O /tmp/Image-ExifTool.tar.gz
        #sudo tar xvf /tmp/Image-ExifTool.tar.gz -C /opt/
        #sudo chown "$USER":"$USER" /opt/Image-ExifTool-12.01/ -R
        #cd /opt/Image-ExifTool-12.01/ && perl Makefile.PL && sudo make install -j && cd -
    else
        test -d $DIR && $RM -rf $DIR
        test -f $DIR_BINS/cewl && sudo unlink $DIR_BINS/cewl
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}crunch"
    $DNF --enablerepo=forensics $ACTION crunch
    #DIR="$OPT_DIR/crunch/"
    #if [ "${1}" == "install" ]; then
    #    test -d $DIR && git -C $DIR pull -q
    #    test -d $DIR || sudo git clone -q https://github.com/jim3ma/crunch $DIR \
    #     && sudo chown "$USER":"$USER" $DIR -R
    #else
    #    test -d $DIR && $RM -rf $DIR
    #    sudo unlink $DIR_BINS/cewl
    #fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}gpp-decrypt"
    if [ "${1}" == "install" ]; then
        sudo wget -q https://gitlab.com/kalilinux/packages/gpp-decrypt/-/raw/kali/master/gpp-decrypt.rb \
         -O $DIR_BINS/gpp-decrypt
        sudo chmod +x $DIR_BINS/gpp-decrypt
    else
        test -f $DIR_BINS/gpp-decrypt && sudo $RM -f $DIR_BINS/gpp-decrypt
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}patator"
    $DNF $ACTION libpq-devel ike-scan libsqlite3x-devel mysql-devel sqlcipher sqlcipher-devel
    $DNF install openldap   # Caution: don't delete, because it removes dependencies
    DIR="$OPT_DIR/patator/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/lanjelot/patator $DIR
        pushd $DIR && sudo pip -q install -r requirements.txt && sudo python setup.py install && popd
        test -f $DIR_BINS/patator || sudo ln -s $DIR/patator.py $DIR_BINS/patator
    else
        test -d $DIR && $RM -rf $DIR
        test -f $DIR_BINS/patator && sudo unlink $DIR_BINS/patator
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}hashcat"
    # https://github.com/intel/compute-runtime/blob/master/opencl/doc/DISTRIBUTIONS.md
    
    ($DNF copr enable jdanecki/intel-opencl) 2> $LOG && $DNF $ACTION intel-opencl
    DIR="$OPT_DIR/hashcat/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/hashcat/hashcat $DIR
        pushd $DIR && make -j4 && sudo make install -j4 && popd
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}john"
    $DNF install openssl-devel  # Caution: don't delete, because it removes dependencies
    DIR="$OPT_DIR/john/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/magnumripper/JohnTheRipper -b bleeding-jumbo $DIR
        pushd $DIR/src/ && ./configure && make -s clean && (make -j4) 2> $LOG && sudo make install -j4 && popd
        test -f $DIR_BINS/john || sudo ln -s $DIR/run/john $DIR_BINS/john
        sudo find $DIR/run -name "*2john*" -exec ln -s {} $DIR_BINS \;
    else
        test -d $DIR && $RM -rf $DIR
        find $DIR_BINS -name "*2john*" -exec  sudo unlink {} \;
    fi
}


function maintaining_access() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    $DNF $ACTION rlwrap nc tigervnc rdesktop
    $DNF install socat  # Caution: don't delete, because it removes dependencies
    $DNF --enablerepo=forensics $ACTION cryptcat


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}httptunnel"
    DIR="$OPT_DIR/httptunnel/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/larsbrinkhoff/httptunnel $DIR
        pushd $DIR/ && (./autogen.sh) 2> $LOG && ./configure && make -j4 && sudo make install -j4 && popd
    else
        test -d $DIR && $RM -rf $DIR
    fi


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}webshells"
    DIR="$DIR_PENTEST/webshells/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://gitlab.com/kalilinux/packages/webshells $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi


    # fallo al compilar
    #DIR="$OPT_DIR/dns2tcp/"
    #test -d $DIR && git -C $DIR pull -q
    #test -d $DIR || sudo git clone -q https://github.com/alex-sector/dns2tcp $DIR \
    # && sudo chown "$USER":"$USER" $DIR -R
    #cd $DIR/ && ./configure && make -j4 && sudo make install -j4 && cd -
}


function reverse_engineering() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    $DNF $ACTION ltrace strace
}

function steganography() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
    # perl-Image-ExifTool- -> /usr/bin/exiftool
    $DNF $ACTION steghide perl-Image-ExifTool


    print_format "${ACTION} ${RESET_COLOUR}${PURPLE_COLOUR}easy_stegoCTF"
    DIR="$OPT_DIR/easy_stegoCTF/"
    if [ "${1}" == "install" ]; then
        test -d $DIR && git -C $DIR pull -q
        test -d $DIR || git clone -q https://github.com/carlospolop/easy_stegoCTF $DIR
    else
        test -d $DIR && $RM -rf $DIR
    fi

    
}

function reportingtools() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi
}


function zsh() {
    git clone -q https://github.com/procamora/custom_workspace
    pushd custom_workspace && bash ./custom_workspace.sh zsh && popd
}


function install() {
    core_tools "$1"
    #firefox_addons

    directories_basic "$1"
    information_gathering "$1"
    vulnerability_analysis "$1"
    wireless_attacks "$1"
    web_applications "$1"
    exploitation_tools "$1"
    stress_testing "$1"
    forensics_tools "$1"
    sniffing_spoofing "$1"
    password_attacks "$1"
    maintaining_access "$1"
    reverse_engineering "$1"
    steganography "$1"
    zsh
}


function extra() {
    if [ "${1}" == "install" ]; then
        ACTION="install"
    else
        ACTION="remove"
    fi

    $DNF --enablerepo=forensics $ACTION ghidra
}

function print_format() {
    echo -e "[*] ${GREEN_COLOUR}$1${RESET_COLOUR}" # print stdout
    >&2 echo -e "[*] ${RED_COLOUR}$1${RESET_COLOUR}" # print stderr
}


function print_help() {
    PROGRAM=$(echo "$0" | tr -d './' | tr -d '.sh')
    PROGRAM=$(echo "$0" | awk -F "./" '{print $NF}' | tr -d '.sh')

    echo -e "\n${PURPLE_COLOUR}${PROGRAM} v1.0 (Source: https://github.com/procamora/fedora_pentesting)${RESET_COLOUR}"
    echo -e "\n${ORANGE_COLOUR}[*] Use: ./${PROGRAM}.sh OPTION${RESET_COLOUR}"
    echo -e "\n${ORANGE_COLOUR}[*] List of available options:${RESET_COLOUR}"
    echo -e "\t${GREEN_COLOUR}install${RESET_COLOUR}\t\t Installing the basic pentesting packages"
    echo -e "\t${GREEN_COLOUR}extra${RESET_COLOUR}\t\t Installing the extra pentesting packages"
    echo -e "\t${GREEN_COLOUR}uninstall${RESET_COLOUR}\t Uninstalling the basic pentesting packages"
    echo -e "\t${GREEN_COLOUR}unextra${RESET_COLOUR}\t\t Uninstalling the extra pentesting packages"
    echo -e "\t${GREEN_COLOUR}gui${RESET_COLOUR}\t\t Installing the pentesting packages with graphic environment"
    echo -e "\t${GREEN_COLOUR}upgrade${RESET_COLOUR}\t\t Upgrade the extra pentesting packages ${CYAN_COLOUR}(same as install)${RESET_COLOUR}"


    echo -e "\n\n${BLUE_COLOUR}Example: ./${PROGRAM}.sh install${RESET_COLOUR}\n"

    #tput cnorm
    exit 1
}


function main() {
    #tput civis

    VALID_ARGUMENT="False" # Usado para detectar si se ha puesto un argumento valido

    test "$1" = "" && print_help
    (test "$1" = "install" || test "$1" = "upgrade" ) && install "install" && VALID_ARGUMENT="True"
    test "$1" = "extra" && extra "install" && VALID_ARGUMENT="True"
    test "$1" = "uninstall" && install "uninstall" && VALID_ARGUMENT="True"
    test "$1" = "gui" && gui "install" && VALID_ARGUMENT="True"
    test "$1" = "unextra" && extra "uninstall" && VALID_ARGUMENT="True"

    print_format "$VALID_ARGUMENT"
    print_format "$VALID_ARGUMENT"

    test "$VALID_ARGUMENT" = "False" && print_help

    sudo updatedb 

    echo -e "${GREEN_COLOUR}Finishing $0${RESET_COLOUR}"
    #tput cnorm
}


function ctrl_c(){
    print_format "Exiting..."
    tput cnorm
    exit 0
}


#trap 'exit 130' INT #Exit if trap Ctrl+C
trap ctrl_c INT


#Colours
declare -r BLACK_COLOUR='\e[0;30m'
declare -r RED_COLOUR='\e[0;31m'
declare -r GREEN_COLOUR='\e[0;32m'
declare -r ORANGE_COLOUR='\e[0;33m'
declare -r BLUE_COLOUR='\e[0;34m'
declare -r PURPLE_COLOUR='\e[0;35m'
declare -r CYAN_COLOUR='\e[0;36m'
declare -r WHITE_COLOUR='\e[0;37m'
declare -r RESET_COLOUR='\e[0m'


main "$@"

